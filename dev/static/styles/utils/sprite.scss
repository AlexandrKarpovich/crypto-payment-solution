// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$icon-invoices-img-name: 'icon-Invoices-img';
$icon-invoices-img-x: 0px;
$icon-invoices-img-y: 0px;
$icon-invoices-img-offset-x: 0px;
$icon-invoices-img-offset-y: 0px;
$icon-invoices-img-width: 672px;
$icon-invoices-img-height: 720px;
$icon-invoices-img-total-width: 1471px;
$icon-invoices-img-total-height: 1312px;
$icon-invoices-img-image: '../images/sprite/sprite.png';
$icon-invoices-img: (0px, 0px, 0px, 0px, 672px, 720px, 1471px, 1312px, '../images/sprite/sprite.png', 'icon-Invoices-img', );
$icon-become-phone-name: 'icon-become-phone';
$icon-become-phone-x: 0px;
$icon-become-phone-y: 725px;
$icon-become-phone-offset-x: 0px;
$icon-become-phone-offset-y: -725px;
$icon-become-phone-width: 449px;
$icon-become-phone-height: 587px;
$icon-become-phone-total-width: 1471px;
$icon-become-phone-total-height: 1312px;
$icon-become-phone-image: '../images/sprite/sprite.png';
$icon-become-phone: (0px, 725px, 0px, -725px, 449px, 587px, 1471px, 1312px, '../images/sprite/sprite.png', 'icon-become-phone', );
$icon-crypto-img-name: 'icon-crypto-img';
$icon-crypto-img-x: 677px;
$icon-crypto-img-y: 0px;
$icon-crypto-img-offset-x: -677px;
$icon-crypto-img-offset-y: 0px;
$icon-crypto-img-width: 794px;
$icon-crypto-img-height: 516px;
$icon-crypto-img-total-width: 1471px;
$icon-crypto-img-total-height: 1312px;
$icon-crypto-img-image: '../images/sprite/sprite.png';
$icon-crypto-img: (677px, 0px, -677px, 0px, 794px, 516px, 1471px, 1312px, '../images/sprite/sprite.png', 'icon-crypto-img', );
$spritesheet-width: 1471px;
$spritesheet-height: 1312px;
$spritesheet-image: '../images/sprite/sprite.png';
$spritesheet-sprites: ($icon-invoices-img, $icon-become-phone, $icon-crypto-img, );
$spritesheet: (1471px, 1312px, '../images/sprite/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
